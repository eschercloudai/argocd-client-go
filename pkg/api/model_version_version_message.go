/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the VersionVersionMessage type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &VersionVersionMessage{}

// VersionVersionMessage struct for VersionVersionMessage
type VersionVersionMessage struct {
	BuildDate        *string `json:"BuildDate,omitempty"`
	Compiler         *string `json:"Compiler,omitempty"`
	GitCommit        *string `json:"GitCommit,omitempty"`
	GitTag           *string `json:"GitTag,omitempty"`
	GitTreeState     *string `json:"GitTreeState,omitempty"`
	GoVersion        *string `json:"GoVersion,omitempty"`
	HelmVersion      *string `json:"HelmVersion,omitempty"`
	JsonnetVersion   *string `json:"JsonnetVersion,omitempty"`
	KubectlVersion   *string `json:"KubectlVersion,omitempty"`
	KustomizeVersion *string `json:"KustomizeVersion,omitempty"`
	Platform         *string `json:"Platform,omitempty"`
	Version          *string `json:"Version,omitempty"`
}

// NewVersionVersionMessage instantiates a new VersionVersionMessage object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewVersionVersionMessage() *VersionVersionMessage {
	this := VersionVersionMessage{}
	return &this
}

// NewVersionVersionMessageWithDefaults instantiates a new VersionVersionMessage object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewVersionVersionMessageWithDefaults() *VersionVersionMessage {
	this := VersionVersionMessage{}
	return &this
}

// GetBuildDate returns the BuildDate field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetBuildDate() string {
	if o == nil || isNil(o.BuildDate) {
		var ret string
		return ret
	}
	return *o.BuildDate
}

// GetBuildDateOk returns a tuple with the BuildDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetBuildDateOk() (*string, bool) {
	if o == nil || isNil(o.BuildDate) {
		return nil, false
	}
	return o.BuildDate, true
}

// HasBuildDate returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasBuildDate() bool {
	if o != nil && !isNil(o.BuildDate) {
		return true
	}

	return false
}

// SetBuildDate gets a reference to the given string and assigns it to the BuildDate field.
func (o *VersionVersionMessage) SetBuildDate(v string) {
	o.BuildDate = &v
}

// GetCompiler returns the Compiler field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetCompiler() string {
	if o == nil || isNil(o.Compiler) {
		var ret string
		return ret
	}
	return *o.Compiler
}

// GetCompilerOk returns a tuple with the Compiler field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetCompilerOk() (*string, bool) {
	if o == nil || isNil(o.Compiler) {
		return nil, false
	}
	return o.Compiler, true
}

// HasCompiler returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasCompiler() bool {
	if o != nil && !isNil(o.Compiler) {
		return true
	}

	return false
}

// SetCompiler gets a reference to the given string and assigns it to the Compiler field.
func (o *VersionVersionMessage) SetCompiler(v string) {
	o.Compiler = &v
}

// GetGitCommit returns the GitCommit field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetGitCommit() string {
	if o == nil || isNil(o.GitCommit) {
		var ret string
		return ret
	}
	return *o.GitCommit
}

// GetGitCommitOk returns a tuple with the GitCommit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetGitCommitOk() (*string, bool) {
	if o == nil || isNil(o.GitCommit) {
		return nil, false
	}
	return o.GitCommit, true
}

// HasGitCommit returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasGitCommit() bool {
	if o != nil && !isNil(o.GitCommit) {
		return true
	}

	return false
}

// SetGitCommit gets a reference to the given string and assigns it to the GitCommit field.
func (o *VersionVersionMessage) SetGitCommit(v string) {
	o.GitCommit = &v
}

// GetGitTag returns the GitTag field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetGitTag() string {
	if o == nil || isNil(o.GitTag) {
		var ret string
		return ret
	}
	return *o.GitTag
}

// GetGitTagOk returns a tuple with the GitTag field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetGitTagOk() (*string, bool) {
	if o == nil || isNil(o.GitTag) {
		return nil, false
	}
	return o.GitTag, true
}

// HasGitTag returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasGitTag() bool {
	if o != nil && !isNil(o.GitTag) {
		return true
	}

	return false
}

// SetGitTag gets a reference to the given string and assigns it to the GitTag field.
func (o *VersionVersionMessage) SetGitTag(v string) {
	o.GitTag = &v
}

// GetGitTreeState returns the GitTreeState field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetGitTreeState() string {
	if o == nil || isNil(o.GitTreeState) {
		var ret string
		return ret
	}
	return *o.GitTreeState
}

// GetGitTreeStateOk returns a tuple with the GitTreeState field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetGitTreeStateOk() (*string, bool) {
	if o == nil || isNil(o.GitTreeState) {
		return nil, false
	}
	return o.GitTreeState, true
}

// HasGitTreeState returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasGitTreeState() bool {
	if o != nil && !isNil(o.GitTreeState) {
		return true
	}

	return false
}

// SetGitTreeState gets a reference to the given string and assigns it to the GitTreeState field.
func (o *VersionVersionMessage) SetGitTreeState(v string) {
	o.GitTreeState = &v
}

// GetGoVersion returns the GoVersion field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetGoVersion() string {
	if o == nil || isNil(o.GoVersion) {
		var ret string
		return ret
	}
	return *o.GoVersion
}

// GetGoVersionOk returns a tuple with the GoVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetGoVersionOk() (*string, bool) {
	if o == nil || isNil(o.GoVersion) {
		return nil, false
	}
	return o.GoVersion, true
}

// HasGoVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasGoVersion() bool {
	if o != nil && !isNil(o.GoVersion) {
		return true
	}

	return false
}

// SetGoVersion gets a reference to the given string and assigns it to the GoVersion field.
func (o *VersionVersionMessage) SetGoVersion(v string) {
	o.GoVersion = &v
}

// GetHelmVersion returns the HelmVersion field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetHelmVersion() string {
	if o == nil || isNil(o.HelmVersion) {
		var ret string
		return ret
	}
	return *o.HelmVersion
}

// GetHelmVersionOk returns a tuple with the HelmVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetHelmVersionOk() (*string, bool) {
	if o == nil || isNil(o.HelmVersion) {
		return nil, false
	}
	return o.HelmVersion, true
}

// HasHelmVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasHelmVersion() bool {
	if o != nil && !isNil(o.HelmVersion) {
		return true
	}

	return false
}

// SetHelmVersion gets a reference to the given string and assigns it to the HelmVersion field.
func (o *VersionVersionMessage) SetHelmVersion(v string) {
	o.HelmVersion = &v
}

// GetJsonnetVersion returns the JsonnetVersion field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetJsonnetVersion() string {
	if o == nil || isNil(o.JsonnetVersion) {
		var ret string
		return ret
	}
	return *o.JsonnetVersion
}

// GetJsonnetVersionOk returns a tuple with the JsonnetVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetJsonnetVersionOk() (*string, bool) {
	if o == nil || isNil(o.JsonnetVersion) {
		return nil, false
	}
	return o.JsonnetVersion, true
}

// HasJsonnetVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasJsonnetVersion() bool {
	if o != nil && !isNil(o.JsonnetVersion) {
		return true
	}

	return false
}

// SetJsonnetVersion gets a reference to the given string and assigns it to the JsonnetVersion field.
func (o *VersionVersionMessage) SetJsonnetVersion(v string) {
	o.JsonnetVersion = &v
}

// GetKubectlVersion returns the KubectlVersion field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetKubectlVersion() string {
	if o == nil || isNil(o.KubectlVersion) {
		var ret string
		return ret
	}
	return *o.KubectlVersion
}

// GetKubectlVersionOk returns a tuple with the KubectlVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetKubectlVersionOk() (*string, bool) {
	if o == nil || isNil(o.KubectlVersion) {
		return nil, false
	}
	return o.KubectlVersion, true
}

// HasKubectlVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasKubectlVersion() bool {
	if o != nil && !isNil(o.KubectlVersion) {
		return true
	}

	return false
}

// SetKubectlVersion gets a reference to the given string and assigns it to the KubectlVersion field.
func (o *VersionVersionMessage) SetKubectlVersion(v string) {
	o.KubectlVersion = &v
}

// GetKustomizeVersion returns the KustomizeVersion field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetKustomizeVersion() string {
	if o == nil || isNil(o.KustomizeVersion) {
		var ret string
		return ret
	}
	return *o.KustomizeVersion
}

// GetKustomizeVersionOk returns a tuple with the KustomizeVersion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetKustomizeVersionOk() (*string, bool) {
	if o == nil || isNil(o.KustomizeVersion) {
		return nil, false
	}
	return o.KustomizeVersion, true
}

// HasKustomizeVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasKustomizeVersion() bool {
	if o != nil && !isNil(o.KustomizeVersion) {
		return true
	}

	return false
}

// SetKustomizeVersion gets a reference to the given string and assigns it to the KustomizeVersion field.
func (o *VersionVersionMessage) SetKustomizeVersion(v string) {
	o.KustomizeVersion = &v
}

// GetPlatform returns the Platform field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetPlatform() string {
	if o == nil || isNil(o.Platform) {
		var ret string
		return ret
	}
	return *o.Platform
}

// GetPlatformOk returns a tuple with the Platform field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetPlatformOk() (*string, bool) {
	if o == nil || isNil(o.Platform) {
		return nil, false
	}
	return o.Platform, true
}

// HasPlatform returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasPlatform() bool {
	if o != nil && !isNil(o.Platform) {
		return true
	}

	return false
}

// SetPlatform gets a reference to the given string and assigns it to the Platform field.
func (o *VersionVersionMessage) SetPlatform(v string) {
	o.Platform = &v
}

// GetVersion returns the Version field value if set, zero value otherwise.
func (o *VersionVersionMessage) GetVersion() string {
	if o == nil || isNil(o.Version) {
		var ret string
		return ret
	}
	return *o.Version
}

// GetVersionOk returns a tuple with the Version field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *VersionVersionMessage) GetVersionOk() (*string, bool) {
	if o == nil || isNil(o.Version) {
		return nil, false
	}
	return o.Version, true
}

// HasVersion returns a boolean if a field has been set.
func (o *VersionVersionMessage) HasVersion() bool {
	if o != nil && !isNil(o.Version) {
		return true
	}

	return false
}

// SetVersion gets a reference to the given string and assigns it to the Version field.
func (o *VersionVersionMessage) SetVersion(v string) {
	o.Version = &v
}

func (o VersionVersionMessage) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o VersionVersionMessage) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.BuildDate) {
		toSerialize["BuildDate"] = o.BuildDate
	}
	if !isNil(o.Compiler) {
		toSerialize["Compiler"] = o.Compiler
	}
	if !isNil(o.GitCommit) {
		toSerialize["GitCommit"] = o.GitCommit
	}
	if !isNil(o.GitTag) {
		toSerialize["GitTag"] = o.GitTag
	}
	if !isNil(o.GitTreeState) {
		toSerialize["GitTreeState"] = o.GitTreeState
	}
	if !isNil(o.GoVersion) {
		toSerialize["GoVersion"] = o.GoVersion
	}
	if !isNil(o.HelmVersion) {
		toSerialize["HelmVersion"] = o.HelmVersion
	}
	if !isNil(o.JsonnetVersion) {
		toSerialize["JsonnetVersion"] = o.JsonnetVersion
	}
	if !isNil(o.KubectlVersion) {
		toSerialize["KubectlVersion"] = o.KubectlVersion
	}
	if !isNil(o.KustomizeVersion) {
		toSerialize["KustomizeVersion"] = o.KustomizeVersion
	}
	if !isNil(o.Platform) {
		toSerialize["Platform"] = o.Platform
	}
	if !isNil(o.Version) {
		toSerialize["Version"] = o.Version
	}
	return toSerialize, nil
}

type NullableVersionVersionMessage struct {
	value *VersionVersionMessage
	isSet bool
}

func (v NullableVersionVersionMessage) Get() *VersionVersionMessage {
	return v.value
}

func (v *NullableVersionVersionMessage) Set(val *VersionVersionMessage) {
	v.value = val
	v.isSet = true
}

func (v NullableVersionVersionMessage) IsSet() bool {
	return v.isSet
}

func (v *NullableVersionVersionMessage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableVersionVersionMessage(val *VersionVersionMessage) *NullableVersionVersionMessage {
	return &NullableVersionVersionMessage{value: val, isSet: true}
}

func (v NullableVersionVersionMessage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableVersionVersionMessage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

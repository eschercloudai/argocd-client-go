/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the V1alpha1GitDirectoryGeneratorItem type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1GitDirectoryGeneratorItem{}

// V1alpha1GitDirectoryGeneratorItem struct for V1alpha1GitDirectoryGeneratorItem
type V1alpha1GitDirectoryGeneratorItem struct {
	Exclude *bool   `json:"exclude,omitempty"`
	Path    *string `json:"path,omitempty"`
}

// NewV1alpha1GitDirectoryGeneratorItem instantiates a new V1alpha1GitDirectoryGeneratorItem object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1GitDirectoryGeneratorItem() *V1alpha1GitDirectoryGeneratorItem {
	this := V1alpha1GitDirectoryGeneratorItem{}
	return &this
}

// NewV1alpha1GitDirectoryGeneratorItemWithDefaults instantiates a new V1alpha1GitDirectoryGeneratorItem object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1GitDirectoryGeneratorItemWithDefaults() *V1alpha1GitDirectoryGeneratorItem {
	this := V1alpha1GitDirectoryGeneratorItem{}
	return &this
}

// GetExclude returns the Exclude field value if set, zero value otherwise.
func (o *V1alpha1GitDirectoryGeneratorItem) GetExclude() bool {
	if o == nil || isNil(o.Exclude) {
		var ret bool
		return ret
	}
	return *o.Exclude
}

// GetExcludeOk returns a tuple with the Exclude field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1GitDirectoryGeneratorItem) GetExcludeOk() (*bool, bool) {
	if o == nil || isNil(o.Exclude) {
		return nil, false
	}
	return o.Exclude, true
}

// HasExclude returns a boolean if a field has been set.
func (o *V1alpha1GitDirectoryGeneratorItem) HasExclude() bool {
	if o != nil && !isNil(o.Exclude) {
		return true
	}

	return false
}

// SetExclude gets a reference to the given bool and assigns it to the Exclude field.
func (o *V1alpha1GitDirectoryGeneratorItem) SetExclude(v bool) {
	o.Exclude = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *V1alpha1GitDirectoryGeneratorItem) GetPath() string {
	if o == nil || isNil(o.Path) {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1GitDirectoryGeneratorItem) GetPathOk() (*string, bool) {
	if o == nil || isNil(o.Path) {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *V1alpha1GitDirectoryGeneratorItem) HasPath() bool {
	if o != nil && !isNil(o.Path) {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *V1alpha1GitDirectoryGeneratorItem) SetPath(v string) {
	o.Path = &v
}

func (o V1alpha1GitDirectoryGeneratorItem) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1GitDirectoryGeneratorItem) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Exclude) {
		toSerialize["exclude"] = o.Exclude
	}
	if !isNil(o.Path) {
		toSerialize["path"] = o.Path
	}
	return toSerialize, nil
}

type NullableV1alpha1GitDirectoryGeneratorItem struct {
	value *V1alpha1GitDirectoryGeneratorItem
	isSet bool
}

func (v NullableV1alpha1GitDirectoryGeneratorItem) Get() *V1alpha1GitDirectoryGeneratorItem {
	return v.value
}

func (v *NullableV1alpha1GitDirectoryGeneratorItem) Set(val *V1alpha1GitDirectoryGeneratorItem) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1GitDirectoryGeneratorItem) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1GitDirectoryGeneratorItem) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1GitDirectoryGeneratorItem(val *V1alpha1GitDirectoryGeneratorItem) *NullableV1alpha1GitDirectoryGeneratorItem {
	return &NullableV1alpha1GitDirectoryGeneratorItem{value: val, isSet: true}
}

func (v NullableV1alpha1GitDirectoryGeneratorItem) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1GitDirectoryGeneratorItem) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package api

import (
	"encoding/json"
)

// checks if the V1GroupKind type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1GroupKind{}

// V1GroupKind +protobuf.options.(gogoproto.goproto_stringer)=false
type V1GroupKind struct {
	Group *string `json:"group,omitempty"`
	Kind  *string `json:"kind,omitempty"`
}

// NewV1GroupKind instantiates a new V1GroupKind object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1GroupKind() *V1GroupKind {
	this := V1GroupKind{}
	return &this
}

// NewV1GroupKindWithDefaults instantiates a new V1GroupKind object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1GroupKindWithDefaults() *V1GroupKind {
	this := V1GroupKind{}
	return &this
}

// GetGroup returns the Group field value if set, zero value otherwise.
func (o *V1GroupKind) GetGroup() string {
	if o == nil || isNil(o.Group) {
		var ret string
		return ret
	}
	return *o.Group
}

// GetGroupOk returns a tuple with the Group field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GroupKind) GetGroupOk() (*string, bool) {
	if o == nil || isNil(o.Group) {
		return nil, false
	}
	return o.Group, true
}

// HasGroup returns a boolean if a field has been set.
func (o *V1GroupKind) HasGroup() bool {
	if o != nil && !isNil(o.Group) {
		return true
	}

	return false
}

// SetGroup gets a reference to the given string and assigns it to the Group field.
func (o *V1GroupKind) SetGroup(v string) {
	o.Group = &v
}

// GetKind returns the Kind field value if set, zero value otherwise.
func (o *V1GroupKind) GetKind() string {
	if o == nil || isNil(o.Kind) {
		var ret string
		return ret
	}
	return *o.Kind
}

// GetKindOk returns a tuple with the Kind field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1GroupKind) GetKindOk() (*string, bool) {
	if o == nil || isNil(o.Kind) {
		return nil, false
	}
	return o.Kind, true
}

// HasKind returns a boolean if a field has been set.
func (o *V1GroupKind) HasKind() bool {
	if o != nil && !isNil(o.Kind) {
		return true
	}

	return false
}

// SetKind gets a reference to the given string and assigns it to the Kind field.
func (o *V1GroupKind) SetKind(v string) {
	o.Kind = &v
}

func (o V1GroupKind) MarshalJSON() ([]byte, error) {
	toSerialize, err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1GroupKind) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Group) {
		toSerialize["group"] = o.Group
	}
	if !isNil(o.Kind) {
		toSerialize["kind"] = o.Kind
	}
	return toSerialize, nil
}

type NullableV1GroupKind struct {
	value *V1GroupKind
	isSet bool
}

func (v NullableV1GroupKind) Get() *V1GroupKind {
	return v.value
}

func (v *NullableV1GroupKind) Set(val *V1GroupKind) {
	v.value = val
	v.isSet = true
}

func (v NullableV1GroupKind) IsSet() bool {
	return v.isSet
}

func (v *NullableV1GroupKind) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1GroupKind(val *V1GroupKind) *NullableV1GroupKind {
	return &NullableV1GroupKind{value: val, isSet: true}
}

func (v NullableV1GroupKind) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1GroupKind) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

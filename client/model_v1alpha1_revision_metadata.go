/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the V1alpha1RevisionMetadata type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1RevisionMetadata{}

// V1alpha1RevisionMetadata struct for V1alpha1RevisionMetadata
type V1alpha1RevisionMetadata struct {
	Author *string `json:"author,omitempty"`
	Date *V1Time `json:"date,omitempty"`
	Message *string `json:"message,omitempty"`
	// SignatureInfo contains a hint on the signer if the revision was signed with GPG, and signature verification is enabled.
	SignatureInfo *string `json:"signatureInfo,omitempty"`
	Tags []string `json:"tags,omitempty"`
}

// NewV1alpha1RevisionMetadata instantiates a new V1alpha1RevisionMetadata object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1RevisionMetadata() *V1alpha1RevisionMetadata {
	this := V1alpha1RevisionMetadata{}
	return &this
}

// NewV1alpha1RevisionMetadataWithDefaults instantiates a new V1alpha1RevisionMetadata object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1RevisionMetadataWithDefaults() *V1alpha1RevisionMetadata {
	this := V1alpha1RevisionMetadata{}
	return &this
}

// GetAuthor returns the Author field value if set, zero value otherwise.
func (o *V1alpha1RevisionMetadata) GetAuthor() string {
	if o == nil || isNil(o.Author) {
		var ret string
		return ret
	}
	return *o.Author
}

// GetAuthorOk returns a tuple with the Author field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RevisionMetadata) GetAuthorOk() (*string, bool) {
	if o == nil || isNil(o.Author) {
		return nil, false
	}
	return o.Author, true
}

// HasAuthor returns a boolean if a field has been set.
func (o *V1alpha1RevisionMetadata) HasAuthor() bool {
	if o != nil && !isNil(o.Author) {
		return true
	}

	return false
}

// SetAuthor gets a reference to the given string and assigns it to the Author field.
func (o *V1alpha1RevisionMetadata) SetAuthor(v string) {
	o.Author = &v
}

// GetDate returns the Date field value if set, zero value otherwise.
func (o *V1alpha1RevisionMetadata) GetDate() V1Time {
	if o == nil || isNil(o.Date) {
		var ret V1Time
		return ret
	}
	return *o.Date
}

// GetDateOk returns a tuple with the Date field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RevisionMetadata) GetDateOk() (*V1Time, bool) {
	if o == nil || isNil(o.Date) {
		return nil, false
	}
	return o.Date, true
}

// HasDate returns a boolean if a field has been set.
func (o *V1alpha1RevisionMetadata) HasDate() bool {
	if o != nil && !isNil(o.Date) {
		return true
	}

	return false
}

// SetDate gets a reference to the given V1Time and assigns it to the Date field.
func (o *V1alpha1RevisionMetadata) SetDate(v V1Time) {
	o.Date = &v
}

// GetMessage returns the Message field value if set, zero value otherwise.
func (o *V1alpha1RevisionMetadata) GetMessage() string {
	if o == nil || isNil(o.Message) {
		var ret string
		return ret
	}
	return *o.Message
}

// GetMessageOk returns a tuple with the Message field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RevisionMetadata) GetMessageOk() (*string, bool) {
	if o == nil || isNil(o.Message) {
		return nil, false
	}
	return o.Message, true
}

// HasMessage returns a boolean if a field has been set.
func (o *V1alpha1RevisionMetadata) HasMessage() bool {
	if o != nil && !isNil(o.Message) {
		return true
	}

	return false
}

// SetMessage gets a reference to the given string and assigns it to the Message field.
func (o *V1alpha1RevisionMetadata) SetMessage(v string) {
	o.Message = &v
}

// GetSignatureInfo returns the SignatureInfo field value if set, zero value otherwise.
func (o *V1alpha1RevisionMetadata) GetSignatureInfo() string {
	if o == nil || isNil(o.SignatureInfo) {
		var ret string
		return ret
	}
	return *o.SignatureInfo
}

// GetSignatureInfoOk returns a tuple with the SignatureInfo field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RevisionMetadata) GetSignatureInfoOk() (*string, bool) {
	if o == nil || isNil(o.SignatureInfo) {
		return nil, false
	}
	return o.SignatureInfo, true
}

// HasSignatureInfo returns a boolean if a field has been set.
func (o *V1alpha1RevisionMetadata) HasSignatureInfo() bool {
	if o != nil && !isNil(o.SignatureInfo) {
		return true
	}

	return false
}

// SetSignatureInfo gets a reference to the given string and assigns it to the SignatureInfo field.
func (o *V1alpha1RevisionMetadata) SetSignatureInfo(v string) {
	o.SignatureInfo = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *V1alpha1RevisionMetadata) GetTags() []string {
	if o == nil || isNil(o.Tags) {
		var ret []string
		return ret
	}
	return o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RevisionMetadata) GetTagsOk() ([]string, bool) {
	if o == nil || isNil(o.Tags) {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *V1alpha1RevisionMetadata) HasTags() bool {
	if o != nil && !isNil(o.Tags) {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *V1alpha1RevisionMetadata) SetTags(v []string) {
	o.Tags = v
}

func (o V1alpha1RevisionMetadata) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1RevisionMetadata) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Author) {
		toSerialize["author"] = o.Author
	}
	if !isNil(o.Date) {
		toSerialize["date"] = o.Date
	}
	if !isNil(o.Message) {
		toSerialize["message"] = o.Message
	}
	if !isNil(o.SignatureInfo) {
		toSerialize["signatureInfo"] = o.SignatureInfo
	}
	if !isNil(o.Tags) {
		toSerialize["tags"] = o.Tags
	}
	return toSerialize, nil
}

type NullableV1alpha1RevisionMetadata struct {
	value *V1alpha1RevisionMetadata
	isSet bool
}

func (v NullableV1alpha1RevisionMetadata) Get() *V1alpha1RevisionMetadata {
	return v.value
}

func (v *NullableV1alpha1RevisionMetadata) Set(val *V1alpha1RevisionMetadata) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1RevisionMetadata) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1RevisionMetadata) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1RevisionMetadata(val *V1alpha1RevisionMetadata) *NullableV1alpha1RevisionMetadata {
	return &NullableV1alpha1RevisionMetadata{value: val, isSet: true}
}

func (v NullableV1alpha1RevisionMetadata) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1RevisionMetadata) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



/*
Consolidate Services

Testing AccountServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eschercloudai/argocd-client-go/client"
)

func Test_client_AccountServiceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test AccountServiceApiService AccountServiceCanI", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var resource string
		var action string
		var subresource string

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceCanI(context.Background(), resource, action, subresource).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountServiceApiService AccountServiceCreateToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceCreateToken(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountServiceApiService AccountServiceDeleteToken", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string
		var id string

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceDeleteToken(context.Background(), name, id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountServiceApiService AccountServiceGetAccount", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var name string

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceGetAccount(context.Background(), name).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountServiceApiService AccountServiceListAccounts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceListAccounts(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test AccountServiceApiService AccountServiceUpdatePassword", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.AccountServiceApi.AccountServiceUpdatePassword(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

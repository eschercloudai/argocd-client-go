/*
Consolidate Services

Testing RepositoryServiceApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package client

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/eschercloudai/argocd-client-go/client"
)

func Test_client_RepositoryServiceApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test RepositoryServiceApiService RepositoryServiceCreateRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceCreateRepository(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceDeleteRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceDeleteRepository(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceGet(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceGetAppDetails", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var sourceRepoURL string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceGetAppDetails(context.Background(), sourceRepoURL).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceGetHelmCharts", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceGetHelmCharts(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceListApps", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceListApps(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceListRefs", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceListRefs(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceListRepositories", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceListRepositories(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceUpdateRepository", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repoRepo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceUpdateRepository(context.Background(), repoRepo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test RepositoryServiceApiService RepositoryServiceValidateAccess", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var repo string

		resp, httpRes, err := apiClient.RepositoryServiceApi.RepositoryServiceValidateAccess(context.Background(), repo).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}

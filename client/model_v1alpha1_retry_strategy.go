/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the V1alpha1RetryStrategy type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1RetryStrategy{}

// V1alpha1RetryStrategy struct for V1alpha1RetryStrategy
type V1alpha1RetryStrategy struct {
	Backoff *V1alpha1Backoff `json:"backoff,omitempty"`
	// Limit is the maximum number of attempts for retrying a failed sync. If set to 0, no retries will be performed.
	Limit *string `json:"limit,omitempty"`
}

// NewV1alpha1RetryStrategy instantiates a new V1alpha1RetryStrategy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1RetryStrategy() *V1alpha1RetryStrategy {
	this := V1alpha1RetryStrategy{}
	return &this
}

// NewV1alpha1RetryStrategyWithDefaults instantiates a new V1alpha1RetryStrategy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1RetryStrategyWithDefaults() *V1alpha1RetryStrategy {
	this := V1alpha1RetryStrategy{}
	return &this
}

// GetBackoff returns the Backoff field value if set, zero value otherwise.
func (o *V1alpha1RetryStrategy) GetBackoff() V1alpha1Backoff {
	if o == nil || isNil(o.Backoff) {
		var ret V1alpha1Backoff
		return ret
	}
	return *o.Backoff
}

// GetBackoffOk returns a tuple with the Backoff field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RetryStrategy) GetBackoffOk() (*V1alpha1Backoff, bool) {
	if o == nil || isNil(o.Backoff) {
		return nil, false
	}
	return o.Backoff, true
}

// HasBackoff returns a boolean if a field has been set.
func (o *V1alpha1RetryStrategy) HasBackoff() bool {
	if o != nil && !isNil(o.Backoff) {
		return true
	}

	return false
}

// SetBackoff gets a reference to the given V1alpha1Backoff and assigns it to the Backoff field.
func (o *V1alpha1RetryStrategy) SetBackoff(v V1alpha1Backoff) {
	o.Backoff = &v
}

// GetLimit returns the Limit field value if set, zero value otherwise.
func (o *V1alpha1RetryStrategy) GetLimit() string {
	if o == nil || isNil(o.Limit) {
		var ret string
		return ret
	}
	return *o.Limit
}

// GetLimitOk returns a tuple with the Limit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1RetryStrategy) GetLimitOk() (*string, bool) {
	if o == nil || isNil(o.Limit) {
		return nil, false
	}
	return o.Limit, true
}

// HasLimit returns a boolean if a field has been set.
func (o *V1alpha1RetryStrategy) HasLimit() bool {
	if o != nil && !isNil(o.Limit) {
		return true
	}

	return false
}

// SetLimit gets a reference to the given string and assigns it to the Limit field.
func (o *V1alpha1RetryStrategy) SetLimit(v string) {
	o.Limit = &v
}

func (o V1alpha1RetryStrategy) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1RetryStrategy) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Backoff) {
		toSerialize["backoff"] = o.Backoff
	}
	if !isNil(o.Limit) {
		toSerialize["limit"] = o.Limit
	}
	return toSerialize, nil
}

type NullableV1alpha1RetryStrategy struct {
	value *V1alpha1RetryStrategy
	isSet bool
}

func (v NullableV1alpha1RetryStrategy) Get() *V1alpha1RetryStrategy {
	return v.value
}

func (v *NullableV1alpha1RetryStrategy) Set(val *V1alpha1RetryStrategy) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1RetryStrategy) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1RetryStrategy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1RetryStrategy(val *V1alpha1RetryStrategy) *NullableV1alpha1RetryStrategy {
	return &NullableV1alpha1RetryStrategy{value: val, isSet: true}
}

func (v NullableV1alpha1RetryStrategy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1RetryStrategy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



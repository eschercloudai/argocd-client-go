/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the V1alpha1DuckTypeGenerator type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &V1alpha1DuckTypeGenerator{}

// V1alpha1DuckTypeGenerator DuckType defines a generator to match against clusters registered with ArgoCD.
type V1alpha1DuckTypeGenerator struct {
	ConfigMapRef *string `json:"configMapRef,omitempty"`
	LabelSelector *V1LabelSelector `json:"labelSelector,omitempty"`
	Name *string `json:"name,omitempty"`
	RequeueAfterSeconds *string `json:"requeueAfterSeconds,omitempty"`
	Template *V1alpha1ApplicationSetTemplate `json:"template,omitempty"`
	Values *map[string]string `json:"values,omitempty"`
}

// NewV1alpha1DuckTypeGenerator instantiates a new V1alpha1DuckTypeGenerator object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewV1alpha1DuckTypeGenerator() *V1alpha1DuckTypeGenerator {
	this := V1alpha1DuckTypeGenerator{}
	return &this
}

// NewV1alpha1DuckTypeGeneratorWithDefaults instantiates a new V1alpha1DuckTypeGenerator object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewV1alpha1DuckTypeGeneratorWithDefaults() *V1alpha1DuckTypeGenerator {
	this := V1alpha1DuckTypeGenerator{}
	return &this
}

// GetConfigMapRef returns the ConfigMapRef field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetConfigMapRef() string {
	if o == nil || isNil(o.ConfigMapRef) {
		var ret string
		return ret
	}
	return *o.ConfigMapRef
}

// GetConfigMapRefOk returns a tuple with the ConfigMapRef field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetConfigMapRefOk() (*string, bool) {
	if o == nil || isNil(o.ConfigMapRef) {
		return nil, false
	}
	return o.ConfigMapRef, true
}

// HasConfigMapRef returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasConfigMapRef() bool {
	if o != nil && !isNil(o.ConfigMapRef) {
		return true
	}

	return false
}

// SetConfigMapRef gets a reference to the given string and assigns it to the ConfigMapRef field.
func (o *V1alpha1DuckTypeGenerator) SetConfigMapRef(v string) {
	o.ConfigMapRef = &v
}

// GetLabelSelector returns the LabelSelector field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetLabelSelector() V1LabelSelector {
	if o == nil || isNil(o.LabelSelector) {
		var ret V1LabelSelector
		return ret
	}
	return *o.LabelSelector
}

// GetLabelSelectorOk returns a tuple with the LabelSelector field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetLabelSelectorOk() (*V1LabelSelector, bool) {
	if o == nil || isNil(o.LabelSelector) {
		return nil, false
	}
	return o.LabelSelector, true
}

// HasLabelSelector returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasLabelSelector() bool {
	if o != nil && !isNil(o.LabelSelector) {
		return true
	}

	return false
}

// SetLabelSelector gets a reference to the given V1LabelSelector and assigns it to the LabelSelector field.
func (o *V1alpha1DuckTypeGenerator) SetLabelSelector(v V1LabelSelector) {
	o.LabelSelector = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetName() string {
	if o == nil || isNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetNameOk() (*string, bool) {
	if o == nil || isNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasName() bool {
	if o != nil && !isNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *V1alpha1DuckTypeGenerator) SetName(v string) {
	o.Name = &v
}

// GetRequeueAfterSeconds returns the RequeueAfterSeconds field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetRequeueAfterSeconds() string {
	if o == nil || isNil(o.RequeueAfterSeconds) {
		var ret string
		return ret
	}
	return *o.RequeueAfterSeconds
}

// GetRequeueAfterSecondsOk returns a tuple with the RequeueAfterSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetRequeueAfterSecondsOk() (*string, bool) {
	if o == nil || isNil(o.RequeueAfterSeconds) {
		return nil, false
	}
	return o.RequeueAfterSeconds, true
}

// HasRequeueAfterSeconds returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasRequeueAfterSeconds() bool {
	if o != nil && !isNil(o.RequeueAfterSeconds) {
		return true
	}

	return false
}

// SetRequeueAfterSeconds gets a reference to the given string and assigns it to the RequeueAfterSeconds field.
func (o *V1alpha1DuckTypeGenerator) SetRequeueAfterSeconds(v string) {
	o.RequeueAfterSeconds = &v
}

// GetTemplate returns the Template field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetTemplate() V1alpha1ApplicationSetTemplate {
	if o == nil || isNil(o.Template) {
		var ret V1alpha1ApplicationSetTemplate
		return ret
	}
	return *o.Template
}

// GetTemplateOk returns a tuple with the Template field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetTemplateOk() (*V1alpha1ApplicationSetTemplate, bool) {
	if o == nil || isNil(o.Template) {
		return nil, false
	}
	return o.Template, true
}

// HasTemplate returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasTemplate() bool {
	if o != nil && !isNil(o.Template) {
		return true
	}

	return false
}

// SetTemplate gets a reference to the given V1alpha1ApplicationSetTemplate and assigns it to the Template field.
func (o *V1alpha1DuckTypeGenerator) SetTemplate(v V1alpha1ApplicationSetTemplate) {
	o.Template = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *V1alpha1DuckTypeGenerator) GetValues() map[string]string {
	if o == nil || isNil(o.Values) {
		var ret map[string]string
		return ret
	}
	return *o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *V1alpha1DuckTypeGenerator) GetValuesOk() (*map[string]string, bool) {
	if o == nil || isNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *V1alpha1DuckTypeGenerator) HasValues() bool {
	if o != nil && !isNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given map[string]string and assigns it to the Values field.
func (o *V1alpha1DuckTypeGenerator) SetValues(v map[string]string) {
	o.Values = &v
}

func (o V1alpha1DuckTypeGenerator) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o V1alpha1DuckTypeGenerator) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.ConfigMapRef) {
		toSerialize["configMapRef"] = o.ConfigMapRef
	}
	if !isNil(o.LabelSelector) {
		toSerialize["labelSelector"] = o.LabelSelector
	}
	if !isNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !isNil(o.RequeueAfterSeconds) {
		toSerialize["requeueAfterSeconds"] = o.RequeueAfterSeconds
	}
	if !isNil(o.Template) {
		toSerialize["template"] = o.Template
	}
	if !isNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableV1alpha1DuckTypeGenerator struct {
	value *V1alpha1DuckTypeGenerator
	isSet bool
}

func (v NullableV1alpha1DuckTypeGenerator) Get() *V1alpha1DuckTypeGenerator {
	return v.value
}

func (v *NullableV1alpha1DuckTypeGenerator) Set(val *V1alpha1DuckTypeGenerator) {
	v.value = val
	v.isSet = true
}

func (v NullableV1alpha1DuckTypeGenerator) IsSet() bool {
	return v.isSet
}

func (v *NullableV1alpha1DuckTypeGenerator) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableV1alpha1DuckTypeGenerator(val *V1alpha1DuckTypeGenerator) *NullableV1alpha1DuckTypeGenerator {
	return &NullableV1alpha1DuckTypeGenerator{value: val, isSet: true}
}

func (v NullableV1alpha1DuckTypeGenerator) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableV1alpha1DuckTypeGenerator) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



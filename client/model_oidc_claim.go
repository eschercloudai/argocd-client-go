/*
Consolidate Services

Description of all APIs

API version: version not set
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package client

import (
	"encoding/json"
)

// checks if the OidcClaim type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &OidcClaim{}

// OidcClaim struct for OidcClaim
type OidcClaim struct {
	Essential *bool `json:"essential,omitempty"`
	Value *string `json:"value,omitempty"`
	Values []string `json:"values,omitempty"`
}

// NewOidcClaim instantiates a new OidcClaim object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewOidcClaim() *OidcClaim {
	this := OidcClaim{}
	return &this
}

// NewOidcClaimWithDefaults instantiates a new OidcClaim object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewOidcClaimWithDefaults() *OidcClaim {
	this := OidcClaim{}
	return &this
}

// GetEssential returns the Essential field value if set, zero value otherwise.
func (o *OidcClaim) GetEssential() bool {
	if o == nil || isNil(o.Essential) {
		var ret bool
		return ret
	}
	return *o.Essential
}

// GetEssentialOk returns a tuple with the Essential field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcClaim) GetEssentialOk() (*bool, bool) {
	if o == nil || isNil(o.Essential) {
		return nil, false
	}
	return o.Essential, true
}

// HasEssential returns a boolean if a field has been set.
func (o *OidcClaim) HasEssential() bool {
	if o != nil && !isNil(o.Essential) {
		return true
	}

	return false
}

// SetEssential gets a reference to the given bool and assigns it to the Essential field.
func (o *OidcClaim) SetEssential(v bool) {
	o.Essential = &v
}

// GetValue returns the Value field value if set, zero value otherwise.
func (o *OidcClaim) GetValue() string {
	if o == nil || isNil(o.Value) {
		var ret string
		return ret
	}
	return *o.Value
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcClaim) GetValueOk() (*string, bool) {
	if o == nil || isNil(o.Value) {
		return nil, false
	}
	return o.Value, true
}

// HasValue returns a boolean if a field has been set.
func (o *OidcClaim) HasValue() bool {
	if o != nil && !isNil(o.Value) {
		return true
	}

	return false
}

// SetValue gets a reference to the given string and assigns it to the Value field.
func (o *OidcClaim) SetValue(v string) {
	o.Value = &v
}

// GetValues returns the Values field value if set, zero value otherwise.
func (o *OidcClaim) GetValues() []string {
	if o == nil || isNil(o.Values) {
		var ret []string
		return ret
	}
	return o.Values
}

// GetValuesOk returns a tuple with the Values field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *OidcClaim) GetValuesOk() ([]string, bool) {
	if o == nil || isNil(o.Values) {
		return nil, false
	}
	return o.Values, true
}

// HasValues returns a boolean if a field has been set.
func (o *OidcClaim) HasValues() bool {
	if o != nil && !isNil(o.Values) {
		return true
	}

	return false
}

// SetValues gets a reference to the given []string and assigns it to the Values field.
func (o *OidcClaim) SetValues(v []string) {
	o.Values = v
}

func (o OidcClaim) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o OidcClaim) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !isNil(o.Essential) {
		toSerialize["essential"] = o.Essential
	}
	if !isNil(o.Value) {
		toSerialize["value"] = o.Value
	}
	if !isNil(o.Values) {
		toSerialize["values"] = o.Values
	}
	return toSerialize, nil
}

type NullableOidcClaim struct {
	value *OidcClaim
	isSet bool
}

func (v NullableOidcClaim) Get() *OidcClaim {
	return v.value
}

func (v *NullableOidcClaim) Set(val *OidcClaim) {
	v.value = val
	v.isSet = true
}

func (v NullableOidcClaim) IsSet() bool {
	return v.isSet
}

func (v *NullableOidcClaim) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableOidcClaim(val *OidcClaim) *NullableOidcClaim {
	return &NullableOidcClaim{value: val, isSet: true}
}

func (v NullableOidcClaim) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableOidcClaim) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}



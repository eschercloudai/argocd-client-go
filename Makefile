# Who owns the module.
ORGANIZATION = eschercloudai

# The module name.
MODULE_NAME = argocd-client-go

# The fully qualified module.
MODULE = github.com/$(ORGANIZATION)/$(MODULE_NAME)

# Defines the ArgoCD schema version.
VERSION = v2.5.3

# Defines the autogenerated package name and where it lives in the module.
PACKAGE = api
PACKAGE_PATH = pkg/$(PACKAGE)

# Defines the linter version.
LINT_VERSION = v1.50.0

# Some bits about go.
GOPATH := $(shell go env GOPATH)
GOBIN := $(if $(shell go env GOBIN),$(shell go env GOBIN),$(GOPATH)/bin)

all:
	wget -q https://raw.githubusercontent.com/argoproj/argo-cd/$(VERSION)/assets/swagger.json -O swagger.json.orig
	# We need to fix the broken...
	go install github.com/evanphx/json-patch/v5/cmd/json-patch@v5.6.0
	cat swagger.json.orig | $(GOBIN)/json-patch -p patches.json > swagger.json
	# Clean up old files.
	rm -rf $(PACKAGE)
	# Generate the actual code.
	docker run --rm -ti \
		--user $$(id -u):$$(id -g) \
		--mount type=bind,source=$$(pwd),destination=/mnt/src \
		openapitools/openapi-generator-cli \
		generate \
		--git-host github.com \
		--git-user-id $(ORGANIZATION) \
		--git-repo-id $(MODULE_NAME)/$(PACKAGE_PATH) \
		-g go \
		-p packageName=$(PACKAGE) \
		-i /mnt/src/swagger.json \
		-o /mnt/src/$(PACKAGE_PATH)
	# Remove all traces of any go.mod/go.sum, we'll auto generate them
	# based on actual deps, not what's autogenerated by openapi.
	rm -rf go.* $(PACKAGE_PATH)/go.*
	go mod init $(MODULE)
	go mod tidy
	# You are supposed to be able to post process, but I've not figured that
	# out yet!
	go fmt ./$(PACKAGE_PATH)/...


.PHONY: test
test:
	go test ./...

.PHOMY: lint
lint: $(GENDIR)
	go install github.com/golangci/golangci-lint/cmd/golangci-lint@$(LINT_VERSION)
	$(GOBIN)/golangci-lint run ./...
